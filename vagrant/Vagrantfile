# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['project_root'] = project_root = File.expand_path(File.dirname(__FILE__))
ENV['valkyrie_root'] = valkyrie_root = "#{project_root}/.valkyrie/valkyrie/vagrant"
# List of VMs (comma-separated) on which to run plugins.
#ENV['VALKYRIE_VMS'] = 'valkyrie'

require "#{valkyrie_root}/lib/mount/mount"   # Allows for seamless NFS usage.

require "#{valkyrie_root}/lib/config/config" # Load and merge settings.
conf_paths = [
  ".valkyrie/valkyrie/vagrant/config.yml",   # Default Valkyrie settings
  ".valkyrie/config.yml",                    # Project-specific overrides
  "config.yml",                              # Local overrides
]
conf = load_config(conf_paths, project_root)

# Register our project as a place for Drush to find aliases.
ENV['VALKYRIE_PROJECT_PATH'] = File.dirname(File.expand_path(__FILE__))
require "#{valkyrie_root}/lib/drush-aliases/drush-aliases"

Vagrant.configure(2) do |config|
  # Silence annoying and spurious warnings
  config.ssh.shell = 'bash -c "BASH_ENV=/etc/profile exec bash"'

  config.ssh.forward_agent = true

  # Setup a DNS server to help the host resolve domains on the guest.
  require "#{valkyrie_root}/vagrant-dns"
  if Vagrant.has_plugin? 'vagrant-dns'
    configure_vagrant_dns(config, conf)
  else
    install_vagrant_dns(conf)
    # On Linux hosts, use Avahi to broadcast domains via mDNS from the guest
    avahi_fallback(config, conf)
  end

  config.vm.define 'valkyrie' do |v|

    v.vm.network 'private_network', ip: conf['ip']
    if conf['public_network']
      v.vm.network 'public_network'
    end

    v.vm.box = conf['vm_box']
    v.vm.provider 'virtualbox' do |vbox|
      vbox.cpus = conf['cpus']
      vbox.memory = conf['vm_memory']
      # Ensure DNS resolution will work within the VM.
      vbox.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
      vbox.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
    end

    conf['nfs_paths'].each do |guest_path, host_path|
      v.vm.synced_folder host_path, guest_path,
        type: 'nfs',
        create: true,
        nfs: 3
    end

    # Make the host user's SSH key available in the VM.
    v.vm.provision 'file',
      source: '~/.ssh/id_rsa.pub',
      destination: '/vagrant/.valkyrie/ssh/authorized_keys'

    v.vm.provision "shell",
      inline: "PYTHONUNBUFFERED=1 ANSIBLE_FORCE_COLOR=true ansible-playbook /vagrant/.valkyrie/valkyrie/vagrant/ansible/site.yml -i /vagrant/.valkyrie/valkyrie/vagrant/ansible/inventory --connection=local --sudo --extra-vars 'valkyrie_frontend_url=#{config.vm.hostname} host_uid=#{Process.uid}'",
      keep_color: true

  end
end
