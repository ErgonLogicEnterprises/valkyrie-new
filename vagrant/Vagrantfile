# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['project_root'] = project_root = File.expand_path(File.dirname(__FILE__))
ENV['valkyrie_root'] = valkyrie_root = "#{project_root}/.valkyrie/valkyrie/vagrant"

Vagrant.configure(2) do |config|
  # Required since we are using our own keys.
  config.ssh.insert_key = false
  # Silence annoying and spurious warnings
  config.ssh.shell = 'bash -c "BASH_ENV=/etc/profile exec bash"'

  config.ssh.forward_agent = true

  require "#{valkyrie_root}/lib/mount/mount"   # Allows for seamless NFS usage.

  require "#{valkyrie_root}/lib/config/config" # Load and merge settings.
  conf_paths = [
    ".valkyrie/valkyrie/vagrant/config.yml",   # Default Valkyrie settings
    ".valkyrie/config.yml",                    # Project-specific overrides
    "config.yml",                              # Local overrides
  ]
  conf = load_config(conf_paths, project_root)

  # Register our project as a place for Drush to find aliases.
  ENV['VALKYRIE_PROJECT_PATH'] = File.dirname(File.expand_path(__FILE__))
  require "#{valkyrie_root}/lib/drush-aliases/drush-aliases"

  # Setup a DNS server to help the host resolve domains on the guest.
  require "#{valkyrie_root}/vagrant-dns"
  if Vagrant.has_plugin? 'vagrant-dns'
    configure_vagrant_dns(config, conf)
  else
    install_vagrant_dns(conf)
    # On Linux hosts, use Avahi to broadcast domains via mDNS from the guest
    avahi_fallback(config, conf)
  end

  config.vm.define 'default' do |vm1|

    vm1.vm.network 'private_network', ip: conf['ip']
    vm1.vm.box = conf['vm_box']
    vm1.vm.provider 'virtualbox' do |vbox|
      vbox.cpus = conf['cpus']
      vbox.memory = conf['vm_memory']
    end

    conf['nfs_paths'].each do |guest_path, host_path|
      vm1.vm.synced_folder host_path, guest_path,
        type: 'nfs',
        create: true,
        #nfs_version: 3
        nfs: 3
    end

    # Copy in some user-specific files to make the environment more familiar
    conf['dot_files'].each do |dot_file|
      real_dotfile = ENV['HOME']+'/'+dot_file
      if File.file?(real_dotfile)
        vm1.vm.provision 'file',
          source: real_dotfile,
          destination: "/home/ubuntu/#{dot_file}"
        vm1.vm.provision 'shell',
          inline: "cp /home/ubuntu/#{dot_file} /var/aegir/#{dot_file}"
        vm1.vm.provision 'shell',
          inline: "cp /home/ubuntu/#{dot_file} /root/#{dot_file}"
      end
    end

    facter = {
      # Facter doesn't determine the FQDN properly in Debian and derivatives.
      'fqdn' => config.vm.hostname,
      # We use these to re-map the 'aegir' user's uid and the 'www-data'
      # group's gid, so that NFS works properly.
      'host_uid' => Process.uid,
      'host_gid' => Process.gid,
      # We apply slightly different configs in the VM depending on the host OS.
      'host_os' => RUBY_PLATFORM,
      'first_run' => first_run,
    }
    # Facter cannot determine the domain under vagrant-dns.
    facter['domain'] = Vagrant.has_plugin?('vagrant-dns') ? conf['tld'] : 'local'

    vm1.vm.provision 'puppet',
      module_path: "#{valkyrie_root}/puppet/modules",
      manifests_path: "#{valkyrie_root}/puppet/manifests",
      facter: facter
  end
end
